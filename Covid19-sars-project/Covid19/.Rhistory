logisticRegression <- glm(as.factor(Attrition)~.,family = binomial(link = "logit"),data=training_set)
test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction <- ifelse(logitPrediction > 0.5,1,0)
summary(regressor)
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#Hypothesis:F-Statistic is significant which shows regression is significant i.e. Dependent varaible is dependant on the given independent varaibles in
regressor<-lm(formula=training_set$Attrition~.,
data=training_set)
logisticRegression <- glm(as.factor(Attrition)~.,family = binomial(link = "logit"),data=training_set)
#test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction <- ifelse(logitPrediction > 0.5,1,0)
summary(regressor)
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#Hypothesis:F-Statistic is significant which shows regression is significant i.e. Dependent varaible is dependant on the given independent varaibles in
regressor<-lm(formula=training_set$Attrition~.,
data=training_set)
logisticRegression <- glm(as.factor(Attrition)~.,family = binomial(link = "logit"),data=training_set)
#test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction <- ifelse(logitPrediction > 0.2,1,0)
summary(regressor)
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#Hypothesis:F-Statistic is significant which shows regression is significant i.e. Dependent varaible is dependant on the given independent varaibles in
regressor<-lm(formula=training_set$Attrition~.,
data=training_set)
logisticRegression <- glm(as.factor(Attrition)~.,family = binomial(link = "logit"),data=training_set)
#test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction <- ifelse(logitPrediction > 0.3,1,0)
summary(regressor)
#IBM_Attrition_Data$WorkLifeBalance = as.factor(IBM_Attrition_Data$WorkLifeBalance)
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#glm(bin ~ High, family = "binomial", data = df)
logisticRegression <- glm(as.factor(Attrition)~.,family = binomial(link = "logit"),data=training_set)
test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction1 <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction2 <- ifelse(logitPrediction > 0.5,1,0)
#IBM_Attrition_Data$WorkLifeBalance = as.factor(IBM_Attrition_Data$WorkLifeBalance)
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#glm(bin ~ High, family = "binomial", data = df)
logisticRegression <- glm(Attrition~.,family = binomial(link = "logit"),data=training_set)
test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction1 <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction2 <- ifelse(logitPrediction > 0.5,1,0)
#IBM_Attrition_Data$WorkLifeBalance = as.factor(IBM_Attrition_Data$WorkLifeBalance)
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#glm(bin ~ High, family = "binomial", data = df)
logisticRegression <- glm(Attrition~.,family = binomial(link = "logit"),data=training_set)
test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction1 <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction2 <- ifelse(logitPrediction > 0.5,1,0)
#IBM_Attrition_Data$WorkLifeBalance = as.factor(IBM_Attrition_Data$WorkLifeBalance)
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#glm(bin ~ High, family = "binomial", data = df)
logisticRegression <- glm(Attrition ~.,family=binomial(link="logit"),data=training_set)
test_set = test_set %>% mutate(Attrition = ifelse(Attrition == "No",0,1))
logitPrediction <- predict(logisticRegression, newdata=test_set,type="response")
logitPrediction <- ifelse(logitPrediction > 0.5,1,0)
hr_data_raw[1:10,] %>%
knitr::kable(caption = "First 10 rows")
IBM_Attrition_Data[1:10,] %>%
knitr::kable(caption = "First 10 rows")
library(tidyverse)
library(ggplot2)
library(readr)
library(knitr)
IBM_Attrition_Data <- read_csv("IBM Attrition Data.csv")
data(IBM_Attrition_Data)
head(IBM_Attrition_Data)
tail(IBM_Attrition_Data)
summary(IBM_Attrition_Data)
library(tidyverse)
library(ggplot2)
library(readr)
library(knitr)
IBM_Attrition_Data <- read_csv("IBM Attrition Data.csv")
data(IBM_Attrition_Data)
head(IBM_Attrition_Data)
tail(IBM_Attrition_Data)
summary(IBM_Attrition_Data)
IBM_Attrition_Data[1:10,] %>%
knitr::kable(caption = "First 10 rows")
IBM_Attrition_Data[1:10,] %>%
knitr::kable(caption = "First 10 rows")
summary(IBM_Attrition_Data)
#variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
#variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
#liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
#predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="confidence")
model <- lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
summary(model)
#residuals(model)
coefficients(model)
#str(model)
#plot(IBM_Attrition_Data$YearsAtCompany, IBM_Attrition_Data$MonthlyIncome)
#abline(lm(IBM_Attrition_Data$YearsAtCompany~IBM_Attrition_Data$MonthlyIncome))
h2o.init()
install.packages(h2o)
install.packages("h2o")
install.packages("h2o")
library(h2o)
h2o.init()
#install.packages("h2o")
library(h2o)
h2o.init()
h2o.no_progress()
IBM_Attrition_Data_data_h2o <- as.h2o(IBM_Attrition_Data)
set.seed(123)
split_h2o <- h2o.splitFrame(IBM_Attrition_Data_data_h2oo, c(0.7, 0.15), seed = 1234 )
IBM_Attrition_Data_h2o <- as.h2o(IBM_Attrition_Data)
set.seed(123)
split_h2o <- h2o.splitFrame(IBM_Attrition_Data_h2o, c(0.7, 0.15), seed = 1234 )
train_h2o <- h2o.assign(split_h2o[[1]], "train" ) # 70%
valid_h2o <- h2o.assign(split_h2o[[2]], "valid" ) # 15%
test_h2o  <- h2o.assign(split_h2o[[3]], "test" )
IBM_Attrition_Data_h2o <- as.h2o(IBM_Attrition_Data)
set.seed(123)
split_h2o <- h2o.splitFrame(IBM_Attrition_Data_h2o, c(0.7, 0.15), seed = 1234 )
#train_h2o <- h2o.assign(split_h2o[[1]], "train" ) # 70%
valid_h2o <- h2o.assign(split_h2o[[2]], "valid" ) # 15%
test_h2o  <- h2o.assign(split_h2o[[3]], "test" )
ctrl = rpart.control(minsplit=13, minbucket = 15, cp = 0, xval = 10)
destree <- rpart(formula = training_set$Attrition ~ .,
data = training_set[,2:11], method = "class",
control =ctrl)
rpart.plot(destree)
fancyRpartPlot(destree)
printcp(destree)
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:26], type="prob")
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:11], type="prob")
ypred1<-as.data.frame(ypred1)
ycm1<-as.data.frame(ypred1)
ypred1<-ifelse(ypred1$`1`>ypred1$`0`,ypred1$`1`,ypred1$`0`)
y_cm1<-ifelse(ycm1$`1`>ycm1$`0`,1,0)
#Confusion Matrix:
cm1=table(test_set[,1],y_cm1)
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:11], type="prob")
ypred1<-as.data.frame(ypred1)
ycm1<-as.data.frame(ypred1)
ypred1<-ifelse(ypred1$`1`>ypred1$`0`,ypred1$`1`,ypred1$`0`)
y_cm1<-ifelse(ycm1$`1`>ycm1$`0`,1,0)
#Confusion Matrix:
cm1=table(test_set[,1,0],y_cm1)
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:11], type="prob")
ypred1<-as.data.frame(ypred1)
ycm1<-as.data.frame(ypred1)
ypred1<-ifelse(ypred1$`1`>ypred1$`0`,ypred1$`1`,ypred1$`0`)
y_cm1<-ifelse(ycm1$`1`>ycm1$`0`,1,0)
#Confusion Matrix:
cm1=table(test_set[,1],y_cm1)
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:11], type="prob")
ypred1<-as.data.frame(ypred1)
ycm1<-as.data.frame(ypred1)
ypred1<-ifelse(ypred1$`1`>ypred1$`0`,ypred1$`1`,ypred1$`0`)
y_cm1<-ifelse(ycm1$`1`>ycm1$`0`,1,0)
#Confusion Matrix:
cm1=table(test_set[2,11],y_cm1)
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:11], type="prob")
ypred1<-as.data.frame(ypred1)
ycm1<-as.data.frame(ypred1)
ypred1<-ifelse(ypred1$`1`>ypred1$`0`,ypred1$`1`,ypred1$`0`)
y_cm1<-ifelse(ycm1$`1`>ycm1$`0`,1,0)
#Confusion Matrix:
cm1=table(test_set[],y_cm1)
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:11], type="prob")
ypred1<-as.data.frame(ypred1)
ycm1<-as.data.frame(ypred1)
ypred1<-ifelse(ypred1$`1`>ypred1$`0`,ypred1$`1`,ypred1$`0`)
y_cm1<-ifelse(ycm1$`1`>ycm1$`0`,1,0)
#Confusion Matrix:
cm1=table(test_set[,1],y_cm1)
plotcp(destree)
ypred1 <- predict(destree, test_set[,2:11], type="prob")
ypred1<-as.data.frame(ypred1)
ycm1<-as.data.frame(ypred1)
ypred1<-ifelse(ypred1$`1`>ypred1$`0`,ypred1$`1`,ypred1$`0`)
y_cm1<-ifelse(ycm1$`1`>ycm1$`0`,1,0)
#Confusion Matrix:
#cm1=table(test_set[,1],y_cm1)
#cm1
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="confidence")
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="Prediction")
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
table(c)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
table(c,length(10))
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
table(c,length="3")
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
table(c,length=10)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
table(c)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
table(c$se.fit)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
table(c$residual.scale)
library(h2o)
h2o.init()
h2o.no_progress()
IBM_Attrition_Data_h2o <- as.h2o(IBM_Attrition_Data)
set.seed(123)
split_h2o <- h2o.splitFrame(IBM_Attrition_Data_h2o, c(0.7, 0.15), seed = 1234 )
train_h2o <- h2o.assign(split_h2o[[1]], "train" ) # 70%
valid_h2o <- h2o.assign(split_h2o[[2]], "valid" ) # 15%
test_h2o  <- h2o.assign(split_h2o[[3]], "test" )  # 15%
my.theme <- theme_bw() + theme(
axis.title.x = element_text(face="bold", color="black", size=12),
axis.title.y = element_text(face="bold", color="black", size=12),
axis.text = element_text(size=12))
set.seed(123) # permet de fixer les paramètres aléatoires de la rf
rf<-randomUniformForest(Attrition~ . , data = training_set,importance=T,ntree=500)
rf
plot(rf)
forest = randomUniformForest(Attrition ~., data = training_set, ntree = 500, mtry = 10, importance = T)
forestPrediction <- predict(forest, newdata = test_set, type = 'class')
forest = randomUniformForest(Attrition ~., data = training_set, ntree = 500, mtry = 10, importance = T)
forestPrediction <- predict(forest, newdata = IBM_Attrition_Data, type = "class")
forest = randomUniformForest(Attrition ~., data = training_set, ntree = 500, importance = T)
forestPrediction <- predict(forest, newdata = IBM_Attrition_Data, type = "class")
forest = randomUniformForest(Attrition ~., data = training_set, ntree = 500, importance = T)
#forestPrediction <- predict(forest, newdata = IBM_Attrition_Data, type = "class")
forestPrediction = ifelse(forestPrediction == "No",0,1)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
ggplot(results, aes(x=actual, y=prediction)) + geom_point(size=4,alpha = 0.5,color="darkblue") + my.theme + ggtitle("Random Forest - Mitarbeiterfluktuation ") + xlab(label="Actual") + ylab(label="Prediction") + theme(legend.position = "none") + stat_smooth(method = "lm",se = T, size = 1,color="red")
ggplot(results, aes(x=actual, y=prediction)) + geom_point(size=4,alpha = 0.5,color="darkblue") + my.theme + ggtitle("Random Forest - Mitarbeiterfluktuation ") + xlab(label="Actual") + ylab(label="Prediction") + theme(legend.position = "none") + stat_smooth(method = "lm",se = T, size = 1,color="red")
forest = randomUniformForest(Attrition ~., data = training_set, ntree = 500, importance = T)
forestPrediction <- predict(forest, newdata = test_set, type = "class")
forest = randomUniformForest(Attrition ~., data = training_set, ntree = 500, importance = T)
forestPrediction <- predict(forest, newdata = test_set, interval="prediction",)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
ggplot(results, aes(x=actual, y=prediction)) + geom_point(size=4,alpha = 0.5,color="darkblue") + my.theme + ggtitle("Random Forest - Mitarbeiterfluktuation ") + xlab(label="Actual") + ylab(label="Prediction") + theme(legend.position = "none") + stat_smooth(method = "lm",se = T, size = 1,color="red")
forest = randomUniformForest(Attrition ~., data = training_set, ntree = 500, importance = T)
forestPrediction <- predict(forest, newdata = test_set, interval="prediction")
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
c<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
plot(c)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
#predicts the future values + variable_MonthlyInCome
forest<-predict(liner_model,newdata = variable_MonthlyIncome,se.fit = TRUE, interval="prediction")
predict(forest)
IBM_Attrition_Data$YearsAtCompany <-NULL
IBM_Attrition_Data$MonthlyIncome<-NULL
#Target Varaible:
IBM_Attrition_Data$Attrition <- ifelse(IBM_Attrition_Data$Attrition =="No",0,1)
#Splitting the data into Training and Test sets:
set.seed(123)
split=sample.split(IBM_Attrition_Data$Attrition,SplitRatio =0.7)
training_set=subset(IBM_Attrition_Data,split==TRUE)
test_set=subset(IBM_Attrition_Data,split==FALSE)
#Hypothesis:F-Statistic is significant which shows regression is significant i.e. Dependent varaible is dependant on the given independent varaibles in
regressor<-lm(formula=training_set$Attrition~.,
data=training_set)
summary(regressor)
ctrl = rpart.control(minsplit=13, minbucket = 15, cp = 0, xval = 10)
destree <- rpart(formula = training_set$Attrition ~ .,
data = training_set[,2:11], method = "class",
control =ctrl)
rpart.plot(destree)
fancyRpartPlot(destree)
printcp(destree)
plotcp(destree)
my.theme <- theme_bw() + theme(
axis.title.x = element_text(face="bold", color="black", size=12),
axis.title.y = element_text(face="bold", color="black", size=12),
axis.text = element_text(size=12))
set.seed(123) # permet de fixer les paramètres aléatoires de la rf
rf<-randomUniformForest(Attrition~ . , data = training_set,importance=T,ntree=500)
rf
plot(rf)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
ggplot(results, aes(x=actual, y=prediction)) + geom_point(size=4,alpha = 0.5,color="darkblue") + my.theme + ggtitle("Random Forest - Mitarbeiterfluktuation ") + xlab(label="Actual") + ylab(label="Prediction") + theme(legend.position = "none") + stat_smooth(method = "lm",se = T, size = 1,color="red")
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, training_set)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, training_set)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.9)
test<-anti_join(IBM_Attrition_Data, training_set)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
test<-anti_join(IBM_Attrition_Data, train)
rf.results <- predict(rf,test)
results <- data.frame(actual = test$Attrition, prediction = rf.results)
head(results)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome, data=IBM_Attrition_Data)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome,data=IBM_Attrition_Data)
variable_MonthlyIncome<-data.frame(MonthlyIncome=c(1000,4500,2300,2100,1500,5600,6000,3500,1000,7000))
variable_DistanceFromHome<-data.frame(DistanceFromHome=c(11,25,30,10,6,7,13,18,20,25))
#fiting the linear model
liner_model<-lm(IBM_Attrition_Data$YearsAtCompany ~ IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome,data=IBM_Attrition_Data)
plot(IBM_Attrition_Data$YearsAtCompany, IBM_Attrition_Data$MonthlyIncome)
plot(IBM_Attrition_Data$YearsAtCompany, IBM_Attrition_Data$MonthlyIncome)
plot.window(IBM_Attrition_Data$YearsAtCompany, IBM_Attrition_Data$MonthlyIncome)
model<-lm(IBM_Attrition_Data$YearsAtCompany~IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome,data=IBM_Attrition_Data)
model<-lm(IBM_Attrition_Data$YearsAtCompany~IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome,data=IBM_Attrition_Data)
model<-lm(IBM_Attrition_Data$YearsAtCompany~IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome,data=IBM_Attrition_Data)
attr(IBM_Attrition_Data, "names")
model<-lm(IBM_Attrition_Data$YearsAtCompany~IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome,data=IBM_Attrition_Data)
#library(data.table)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(knitr)# Load readr package
library(formattable)
library(RColorBrewer)
library(ggcorrplot)
library(corrplot)
library(rpart)
library(caTools)
library(rpart.plot)
library(rattle)
library(scales)
library(dplyr)
library(party)
library(randomUniformForest)
library(randomForestExplainer)
library(readr)
#library(data.table)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(knitr)# Load readr package
library(formattable)
library(RColorBrewer)
library(ggcorrplot)
library(corrplot)
library(rpart)
library(caTools)
library(rpart.plot)
library(rattle)
library(scales)
library(dplyr)
library(party)
library(randomUniformForest)
library(randomForestExplainer)
library(readr)
model<-lm(IBM_Attrition_Data$YearsAtCompany~IBM_Attrition_Data$MonthlyIncome + IBM_Attrition_Data$DistanceFromHome,data=IBM_Attrition_Data)
shapiro.test(rstandard(model))
shapiro.test(residuals(model))
#install.packages("psych")
library(psych)
psych::describe(IBM_Attrition_Data)
ggplot(data=IBM_Attrition_Data, aes(x=MonthlyIncome, y=YearsAtCompany)) + geom_point() + geom_smooth(method=lm )
knitr::opts_chunk$set(echo = TRUE)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
IBM_Attrition_Data$Date.Fab.=NULL
train <- IBM_Attrition_Data %>% sample_frac(0.8)
shiny::runApp('VDA2/COVID_19/COVID_19/COVID_19_App')
shiny::runApp('VDA2/COVID_19/COVID_19/COVID_19_App')
q()
shiny::runApp('C:/Users/Aurore Ursule/Desktop/Studienprojekt/Covid19/Covid19')
install.packages("shiny")
shiny::runApp('VDA2/Covid19/Covid19')
install.packages("C:/Users/Aurore Ursule/Downloads/cli_3.6.1.zip", repos = NULL, type = "win.binary")
remove.packages(cli)
install.packages("C:/Users/Aurore Ursule/Downloads/cli_3.6.1.zip", repos = NULL, type = "win.binary")
shiny::runApp('VDA2/Covid19/Covid19')
install.packages('terra', dependencies = TRUE)
shiny::runApp('VDA2/Covid19/Covid19')
